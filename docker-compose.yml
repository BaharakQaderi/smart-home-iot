version: '3.8'

services:
  # InfluxDB 2.0 - Time series database
  influxdb:
    image: influxdb:2.7
    container_name: smart-home-influxdb
    ports:
      - "8087:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=password123
      - DOCKER_INFLUXDB_INIT_ORG=smart-home
      - DOCKER_INFLUXDB_INIT_BUCKET=sensors
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=smart-home-token-123456789
    volumes:
      - ./data/influxdb:/var/lib/influxdb2
      - ./infrastructure/docker/influxdb/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - smart-home-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Session store and caching
  redis:
    image: redis:7-alpine
    container_name: smart-home-redis
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - smart-home-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API - FastAPI application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smart-home-backend
    ports:
      - "8001:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - SECRET_KEY=your-secret-key-change-in-production-make-it-very-long-and-random
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=smart-home-token-123456789
      - INFLUXDB_ORG=smart-home
      - INFLUXDB_BUCKET=sensors
      - INFLUXDB_USERNAME=admin
      - INFLUXDB_PASSWORD=password123
      - REDIS_URL=redis://redis:6379
      - FRONTEND_URL=http://localhost:4201
    volumes:
      - ./backend:/app
      - ./data/logs:/app/data/logs
    depends_on:
      influxdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smart-home-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend - Angular application (development)
  frontend:
    image: node:18-alpine
    container_name: smart-home-frontend
    working_dir: /app
    ports:
      - "4201:4200"
    environment:
      - NODE_ENV=development
      - API_URL=http://localhost:8001
      - WEBSOCKET_URL=ws://localhost:8001/ws
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: >
      sh -c "
        apk add --no-cache curl
        echo 'Installing Angular CLI globally...'
        npm install -g @angular/cli
        echo 'Installing project dependencies...'
        npm install --legacy-peer-deps
        echo 'Starting Angular development server...'
        ng serve --host 0.0.0.0 --port 4200
      "
    depends_on:
      - backend
    networks:
      - smart-home-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Monitoring dashboards
  grafana:
    image: grafana/grafana:10.2.0
    container_name: smart-home-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./infrastructure/docker/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/docker/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - influxdb
    networks:
      - smart-home-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx - Reverse proxy (optional for development)
  nginx:
    image: nginx:alpine
    container_name: smart-home-nginx
    ports:
      - "8080:80"
    volumes:
      - ./infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend
    networks:
      - smart-home-network

networks:
  smart-home-network:
    driver: bridge

volumes:
  influxdb_data:
  redis_data:
  grafana_data: 